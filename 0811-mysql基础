1.表结构
	a.创建表结构
	b.查看表结构
	c.删除表结构
	d.修改表结构
		1>增加列
			需求:emp表中新增一个列，id 数值类型
				alter table emp add id int;
		2>修改列
			需求:emp表中修改id的数据类型为char(10)
				alter table emp modify id char(10);
		3>删除列
			需求:emp表中删除id列
				alter table emp drop column id;	
	e.约束
		主键约束  列中的数据是唯一的，不能为空，每张表中只能有一个主键
		唯一约束  列中的数据是唯一的，可以为空，作为主键约束的补充
		检查约束  列中的数据是否满足条件
		非空约束  列中的数据不为空
		外键约束  列中的数据依赖于另外一张表中的数据
2.SQL(结构化查询语言)
	DDL:数据库定义语言  create alter drop truncate
	DML:数据库操作语言  insert update delete
	DCL:数据库控制语言  grant revoke
	DQL:数据库查询语言  select
3.数据的新增、修改、删除
	字符类型需要加单引号
	数值类型直接使用
	日期类型需要加单引号
	a.数据的新增
		a1>向指定列新增数据
			语法:insert into 表(列1,列2...) values(值1,值2....);
			需求:向emp表中新增数据，员工名字 o8ma,员工年龄 18
				insert into emp(age,name) values(18,'o8ma');
		a2>向所有列新增数据
			语法:insert into 表 values(值1,值2....);
			需求:向emp表中新增数据，名字ladeng，年龄100，生日2000-01-01
				insert into emp values('ladeng',100,'2000-01-01');
	b.数据的修改
		语法:update 表名 set 列=值 where 条件;
		where 条件是和行相关内容，用于筛选数据
		如果不加where条件，默认修改的是整个列的数据
		如果增加where条件，默认修改的是指定行的列的数据
			需求:修改emp表中名字是o8ma的年龄修改为0
				update emp set age=0 where name='o8ma';
			需求:修改emp表中生日都为2020-01-01
				update emp set birthday='2020-01-01';
	c.数据的删除
		truncate DDL,截断表，只能删除所有数据，删除数据无法找回
		delete   DML，可以删除指定数据，也可以删除所有数据，删除数据可以找回
		c1>delete
			语法:delete from 表 where 条件;
			需求:删除emp表中名字是o8ma的所有数据
				delete from emp where name='o8ma';
			需求:删除emp表中所有数据
				delete from emp;
		c2>truncate
			语法:truncate table 表;
			需求:删除emp表中所有数据
				truncate table emp;
4.数据的查询
	a.查询的分类
		简单查询
		多表查询
		分组查询
		子查询
	b.简单查询
		语法:select 列 from 表 where 条件；
		select后面from前面是和列相关的，where条件是和行相关的
		* 代表所有的列
		查询所有数据
			需求:查询ecs_goods表中所有的数据
				select * from ecs_goods;
		查询指定列的数据
			需求:查询ecs_goods表中所有的商品名称和本店售价
				select goods_name,shop_price from ecs_goods;
		查询指定行的数据
			需求:查询ecs_goods表中商品名称是KD876的所有数据
				select * from ecs_goods where goods_name='KD876';
		查询指定行的列的数据
			需求:查询ecs_goods表中所有的商品名称是KD876的本店售价
				select shop_price from ecs_goods where goods_name='KD876';
	c.where条件
		c1.比较
			>
			<
			=
			>=
			<=
			!=
			<>  不等于
			需求:查询ecs_goods表中本店售价低于1000的所有商品信息
				select * from ecs_goods where shop_price<1000;
			需求:查询ecs_goods表中商品名称不是KD876的所有信息
				select * from ecs_goods where goods_name<>'KD876';
		c2.关系
			and  同时满足条件
			or   满足一个条件即可
			not  不满足条件
			需求:查询ecs_goods表中本店售价高于1000并且低于2000的所有信息
				select * from ecs_goods where shop_price>1000 and shop_price<2000;
			需求:查询ecs_goods表中商品名称是KD876或者诺基亚的所有信息
				select * from ecs_goods where goods_name='KD876' or goods_name='诺基亚';
		c3.区间
			between...and...
			小在前，大在后，包括两个端点
			需求:查询ecs_goods表中本店售价范围200和1999之间的所有的商品的信息
				select * from ecs_goods where shop_price>=200 and shop_price<=1999;
				select * from ecs_goods where shop_price between 200 and 1999;
		c4.模糊查询
			当信息不完整时候使用，通常和字符类型一起使用
			like   模糊查询关键字
			_      一个字符
			%      任意个字符
			需求:查询ecs_goods表中商品名称是诺基亚开头的所有信息
				select * from ecs_goods where goods_name like '诺基亚%';
			需求:查询ecs_goods表中商品名称是6结尾的所有信息
				select * from ecs_goods where goods_name like '%6';
			需求:查询ecs_goods表中商品名称是6个字符的商品名称
				select goods_name from ecs_goods where goods_name like '______';
		c5.空值查询
			null 没有任何数据类型，没有任何值,不能用于比较和运算，查询时候使用is null或者is not null
			需求:查询ecs_goods表中suppliers_id为空的所有信息
				select * from ecs_goods where suppliers_id is null;
		c6.in查询
			或者的关系
			需求:查询ecs_goods表中商品名称是KD876或者诺基亚的所有信息
			select * from ecs_goods where goods_name in('KD876','诺基亚');


5.子查询
	一条SQL语句的执行依赖于另外一条SQL语句的执行结果
	需求:查询ecs_goods表中最高本店售价的人的名字
		max()  最大
		查询ecs_goods表中最高本店售价是多少
		select max(shop_price) from ecs_goods;
		查询ecs_goods表中本店售价是上面查询出来结果的人的名字
		select goods_name from ecs_goods where shop_price=(select max(shop_price) from ecs_goods);
	子查询可以用于数据的新增、数据的修改、数据的删除
	子查询分为单行子查询和多行子查询
		单行子查询:查询子句返回的结果是一条，可以用=或者in
		多行子查询:查询子句返回的结果是多条，in
	需求:查询商品名称是KD876的分类名称
		分析列:
			商品名称
			分类名称
		分析表:
			ecs_goods
			ecs_category
		拆分
			查询ecs_goods表中满足条件的cat_id
				select cat_id from ecs_goods where goods_name='KD876';
			查询ecs_category表中cat_id为上面查询结果的分类名称
				select cat_name from ecs_category where cat_id=(select cat_id from ecs_goods where goods_name='KD876');
	需求:查询商品本店售价低于1000的商品的分类名称
		查询ecs_goods表中满足条件的cat_id
			select cat_id from ecs_goods where shop_price<1000;
		查询ecs_category表中cat_id为上面查询结果的分类名称
			select cat_name from ecs_category where cat_id in (select cat_id from ecs_goods where shop_price<1000);

















