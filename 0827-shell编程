shell脚本
	把需要的命令保存到文本中，然后执行
a.脚本分类
	bash shell
	cshell
	kshell
b.脚本的执行方式
	./文件名  需要文件有执行权限
	bash 文件名 不需要文件有执行权限
c.shell脚本组成
	若干命令+脚本的基本格式+特定于法=shell脚本
d.完整格式脚本
	shell脚本通常以.sh结尾
	#!/bin/bash     脚本第一行使用#!(魔法字节)指定脚本代码执行的程序
	d1.标准脚本执行方法(魔法字节指定的程序会生效)
		chmod 755 ./3.sh   给脚本执行权限
		./3.sh
		或者
		/root/0827/3.sh
	d2.非标准的执行方法(不推荐)(魔法字节指定程序不会生效)
		. ./4.sh
		或者
		source ./4.sh
		或者
		bash ./4.sh
		或者
		sh   ./4.sh
e.脚本的应用场景
	把复杂的、重复的工作通过命令写成脚本，以后仅仅需要执行脚本就可以完成工作
f.如何学习脚本
	1.尽量记住更多命令
	2.掌握脚本的标准格式
		执行魔法字节和使用标准方式运行脚本
	3.掌握脚本的基本语法
		变量定义
		条件判断
		分支语句
		函数
		数组
		传参
		正则表达式
		sed、awk
g.变量的定义
	默认情况下shel里面变量使不区分类型的，可以给变量赋予任何类型的值
	 	a=123
	 	b='zone'
	 定义变量时候=左右两边不能有空格
	 	a =123
	 	a= 123
	 	a=123
h.变量的分类
	环境变量
	用来映像程序执行过程或者执行结果，一般习惯大写进行命名
	查看当前终端（shell）哪些已经定义了的环境变量
		env
	定义环境变量
	临时改变某个环境变量的值
		export PATH=$PATH:/root/mongodb/bin
	永久设置环境变量值
		./bash_profile

	系统变量
	shell本身已经固定好了名字和作用
	$1,$2.....$*
		!$    上一次操作的最后一个参数
		$?    判断上一条命令的返回结果(命令执行成功返回0，否则不成功)
		$1    文件后的第一个参数
		$2    文件后的第二个参数
i.变量的赋值
	a=123
	b='help'
	使用变量保存命令的执行结果
	kernel=`uname -s`
	反引号可以把引号中的命令先执行，取出结果，再把结果赋值给变量
	kernel2=$( uname -s )
	双引号是弱引号，引号内的变量可以正常使用
	单引号是强引号，引号内所有内容都当作普通字符串
j.简单的四则运算
	算数运算
	默认情况下，shell只支持简单的整数运算
	+ - * / %(取模)
	






