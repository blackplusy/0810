shell脚本
	把需要的命令保存到文本中，然后执行
a.脚本分类
	bash shell
	cshell
	kshell
b.脚本的执行方式
	./文件名  需要文件有执行权限
	bash 文件名 不需要文件有执行权限
c.shell脚本组成
	若干命令+脚本的基本格式+特定于法=shell脚本
d.完整格式脚本
	shell脚本通常以.sh结尾
	#!/bin/bash     脚本第一行使用#!(魔法字节)指定脚本代码执行的程序
	d1.标准脚本执行方法(魔法字节指定的程序会生效)
		chmod 755 ./3.sh   给脚本执行权限
		./3.sh
		或者
		/root/0827/3.sh
	d2.非标准的执行方法(不推荐)(魔法字节指定程序不会生效)
		. ./4.sh
		或者
		source ./4.sh
		或者
		bash ./4.sh
		或者
		sh   ./4.sh
e.脚本的应用场景
	把复杂的、重复的工作通过命令写成脚本，以后仅仅需要执行脚本就可以完成工作
f.如何学习脚本
	1.尽量记住更多命令
	2.掌握脚本的标准格式
		执行魔法字节和使用标准方式运行脚本
	3.掌握脚本的基本语法
		变量定义
		条件判断
		分支语句
		函数
		数组
		传参
		正则表达式
		sed、awk
g.变量的定义
	默认情况下shel里面变量使不区分类型的，可以给变量赋予任何类型的值
	 	a=123
	 	b='zone'
	 定义变量时候=左右两边不能有空格
	 	a =123
	 	a= 123
	 	a=123
h.变量的分类
	环境变量
	用来映像程序执行过程或者执行结果，一般习惯大写进行命名
	查看当前终端（shell）哪些已经定义了的环境变量
		env
	定义环境变量
	临时改变某个环境变量的值
		export PATH=$PATH:/root/mongodb/bin
	永久设置环境变量值
		./bash_profile

	系统变量
	shell本身已经固定好了名字和作用
	$1,$2.....$*
		!$    上一次操作的最后一个参数
		$?    判断上一条命令的返回结果(命令执行成功返回0，否则不成功)
		$1    文件后的第一个参数
		$2    文件后的第二个参数
i.变量的赋值
	a=123
	b='help'
	使用变量保存命令的执行结果
	kernel=`uname -s`
	反引号可以把引号中的命令先执行，取出结果，再把结果赋值给变量
	kernel2=$( uname -s )
	双引号是弱引号，引号内的变量可以正常使用
	单引号是强引号，引号内所有内容都当作普通字符串
j.简单的四则运算
	算数运算
	默认情况下，shell只支持简单的整数运算
	+ - * / %(取模)
k.条件判断
	test 可以通过man test查看条件判断的语法
	条件判断在脚本中可以用if关键字
	test 等价于 [ ]
	语法结构：
		if  [ 条件 ];then
			命令
		fi
		=================
		if  [ 条件 ];then
			命令
		else
			命令
		fi
		=================
		if  [ 条件 ];then
			命令
		elif [ 条件 ];then
			命令
		else
			命令
		fi		
		=================
		if  [ 条件 ];then
			命令
			if  [ 条件 ];then
				命令
			else
				命令
			fi
		else
			命令
		fi
		=================
		必须掌握的条件判断的参数
		-f  文件是否存在
			test -f /etc/passwd    条件成立返回码$?=0
			test -f /etc/          条件不成立返回码非0
			[ -f /etc/passwd ]
			[ -f /etc/ ]
		-d  目录是否存在
		-e  不管是文件还是目录，只要存在条件就成立
		-n  只要字符串非空就是成立
		-z  字符串长度为0，就是成立
		！  结果取反
		字符串的比较 =  ！= 不能用于数值大小的比较
		数值的判断 -eq 相等
		          -ne 不等
		          -lt 小于
		          -gt 大于
		          -ge 大于等于
		逻辑判断符号
			-o    逻辑或
			-a    逻辑与 
			[ 条件1 -a 条件2 ]  两个条件都成立整个大条件才成立
			[ 条件1 -o 条件2 ]  只要其中一个条件成立，整个大条件就成立

l.循环
	ping 服务器集群
	批量创建用户 user1-user100
	计算0-100的总和，0-101之间偶数的和
	for循环
	cut -d: f1 /etc/passwd
	以：分隔，取第一个列

	while循环
	while后面条件为真时候执行

	跳出循环
	break      跳出整个循环
	continue   跳出本次循环
	




