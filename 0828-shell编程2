1.awk 线性文本处理工具
	可以在文本数据进行字段分割和重组
	默认是以空格或者连续的空格作为分隔符
	a.获取本机的IP地址
		ifconfig eth0 |grep Mask |awk -F " " '{print $2}' |awk -F ":" '{ print $2}'
	b.打印所有行
		awk '{ print }' /etc/passwd
	c.打印第一列
		查看系统中有哪些用户
		awk -F ":" '{ print $1}' /etc/passwd
	d.打印多个列
		awk -F ":" '{ print $1,$3 }' /etc/passwd
		awk -F ":" '{ print $1":"$3 }' /etc/passwd
	e.把所有通过ssh登录失败的记录的IP打印出来
		lastb -i |grep ssh| awk -F " " '{ print $3}' |uniq -c
		uniq -c 统计功能
		lastb -i 登录记录
	f.打印每行的最后一列
		$NF 最后一列
		head -3  /etc/passwd |awk -F ":" '{print $NF}'
	g.打印每行字段数(每行有多少列)
		NF  列的数量
		head -3  /etc/passwd | awk -F ":" '{ print NF}'
	h.运算操作符
		+
		-
		*
		/
		%
		^
		++
		--
		echo  |awk '{ print 2^3}'
	i.awk的关系操作符
		==
		!=
		>=
		<=
		>
		<
	j.逻辑操作符
		&&  	逻辑与   真&&真==真
		|| 		逻辑或   假||假==假
		！      逻辑非   
	k.打印行号
		NR  行号
		awk -F ":" '{ print NR,$1}' /etc/passwd
		awk -F ":" 'NR==8{ print }' /etc/passwd
	l.打印字段数量大于3的行
		awk -F ":" 'NF>3{ print }' passwd
	m.打印ui在5-10之间的用户名
		awk -F ":" '$3>=5&&$3<=10{ print }' passwd
	n.隔行删除(隔行打印)
		awk 'NR%2==0{ print }' passwd


系统情况报告
	1.cpu使用率高于80%   vmstat
		vmstat |tail -1 |awk -F " " '{ print $13}'

	2.内存使用率高于80%  free -m
		a=`free -m |grep Mem|awk -F " " '{print $2}'`
		b=`free -m |grep Mem|awk -F " " '{print $3}'`
		echo "scale=2;$b/$a" |bc |awk -F "." '{ print $2}'
	3.磁盘使用率高于80%  df -h
		df -h |grep /$ |awk -F " " '{ print $4}'|awk -F "%" '{print $1}'

	4.超过极限范围通过wall报警

2.awk2
	a.语法
		awk -F "分隔符" 'BEGIN{处理文件前的代码块}{处理文件时候的代码块}END{处理文件后执行代码块}'
	b.输出内容顶部增加come on，输出最后增加 get out
		awk -F ":" 'BEGIN{ print "come on!!!"}{ print }END{ print "getout"}' passwd
come on!!!
	c.打印最后一行的最后一列
		awk -F ":" 'END{ print $NF }' passwd
	d.打印文件中所有字段总数
		awk -F ":" 'BEGIN{ count=0}{count+=NF}END{ print count }' passwd
	e.打印字段数量大于4的总行数
		awk -F ":" 'BEGIN{count=0}NF>4{count++}END{print count}' passwd
	f.awk代码写入文件
		01.awk
		BEGIN
		{
		        FS=":"
		        count=0
		}
		{
		        if (NF>4)
		        {
		                count++
		        }
		}
		END{
		        print count
		}
		调用awk文件
		awk -f 01.awk passwd
	g.awk的函数调用
		awk有很多内置函数
		print("参数") 	打印完毕自动换行
		printf(参数列表) 格式化，定义格式，转义等等
    	echo|awk '{printf("%d--%s\n",12,"simida")}'
    h.awk的循环
    	for (i=0;i<10;i++)
    	{
    		printf("%d",i)
    	}
    	02.awk
    	{
		for (i=0;i<5;i++)
		{
		        printf("%d",i)
		}

		}
		调用:
		echo |awk -f 02.awk
	i.倒序排列所有字段
		test.txt
		1:2:3:4
		a:b:c:d:e
		处理后
		4:3:2:1
		e:d:c:b:a
		03.awk
		BEGIN{
        FS=":"
		}
		{
		        for(i=NF;i>0;i--)
		        {
		                if (i>1)
		                {
		                        printf("%s:",$i)
		                }
		                else
		                {
		                        printf("%s\n",$i)
		                }
		        }
		}
		调用awk -f 03.awk test.txt

3.sed 字段编辑和字段替换
	a.删除指令(d)
		删除所有行  sed -e 'd' passwd
		只删除1行   sed -e '1d' passwd
		删除1到3行  sed -e '1,3d' passwd
		删除1和3行  sed -e '1d;3d' passwd
		包含root关键字行都删除   sed -e '/root/d' passwd
		删除以daemon开头的行     sed -e '/^daemon/d' passwd
		删除以nologin结尾的行	    sed -e '/nologin$/d' passwd
		删除所有空行          	sed -e '/^$/d' passwd
		删除以#开头的所有行      sed -e '/^#/d' passwd
		删除daemon开头到shutdown结尾的行
			sed -e '/^daemon/,/shutdown$/d' passwd
	b.直接把结果保存到源文件中
		sed -i '/^$/d' passwd
	c.打印(p)
		打印所有行  			sed -n -e 'p' passwd
		打印第一行到第三行    sed -n -e '1p;3p' passwd
		打印以root开头的行    sed -n -e '/^root/p' passwd
		打印以nologin结尾的行 sed -n -e '/nologin$/p' passwd
	d.替换
		把每行找到第一个root关键字替换为admin
			sed -e 's/root/admin/' passwd
		把每行找到所有的o替换为admin
			sed -e 's/o/admin/g' passwd
		替换1-3行中:为-
			sed -e '1,3s/:/-/g' passwd
	e.使用域方式进行定位
		echo "03-23-2020" | awk -F "-" '{print $3"-"$2"-"$1}'
		echo "03-23-2020" |sed -r 's/(..)-(..)-(....)/\3-\1-\2/'
		echo "come on,baby" |sed -r 's/(.*),(.*)/\2,\1/'
		删除每行的第二个字符
		cat passwd  | sed -r 's/(.)(.)(,*)/\1\3/'
		删除最后一个字符
		echo "can you see me?" | sed -r 's/(.*)(.)/\1/'












